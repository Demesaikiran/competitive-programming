A deque is a dynamic array but has contiguous allocation of memory, can be efficiently changed at both ends of the array.
Like a vector, a deque provides the functions push_back and pop_back, but also includes the functions push_front and pop_front.

Various other functions are as follows:

        Iterators:
            begin
            end
            cbegin // const iterators
            cend   // While traversing we use *Iterator to access the value

        Element Acess:
            .at(int)
            .front()
            .back()

        Modifiers:
            assign // initializing the deque with some length (n, value) 
            push_back
            push_front
            pop_front
            pop_back
            insert // it = mydeque.insert (it,10);  //  "it" now points to the newly inserted 10
            erase(iterator, iterator); 
            .clear()
            swap //   foo.swap(bar); // where foo and bar are two deque and swaps the deque elements

Usage of deque:

            deque<int> d;
			d.push_back(5); // [5]
			d.push_back(2); // [5,2]
			d.push_front(3); // [3,5,2]
			d.pop_back(); // [3,5]
			d.pop_front(); // [5]

It is slower tha nthe vector as the internal implementation of it is complex than that of vector. Still takes O(1) time @ both sides of deque.
        
